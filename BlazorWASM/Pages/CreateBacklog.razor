@page "/CreateBacklog"
@using HttpClients.ClientInterfaces
@using UIComponents
@using global::Shared.Models
@using global::Shared.DTOs
@using System.Security.Claims
@inject IUserService userService
@inject IBackLogService backlobService
@inject NavigationManager navMgr
@attribute [Authorize("MustBeScrumMaster")]

<div class="card">
    @if (users == null)
    {
        <label>Loading users...</label>
    }
    else if (!users.Any())
    {
        <label>No users, you cannot create a Todo</label>
    }
    else
    {
        <h3>Create Backlog</h3>
        <div class="form-group field">
            <label>Title:</label>
            <input type="text" @bind="backlogName"/>
        </div>
        
        
        
        <div class="button-row">
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }
            <button @onclick="Create" class="acceptbtn">Create</button>
        </div>
    }
</div>

<Modal ShowModal="showModal">
    <p>You have successfully added a new Backlog. You should be very proud of yourself!</p>
    <button @onclick="@Proceed">Wonderful</button>
</Modal>

@code {
    private IEnumerable<User>? users;
    private int selectedId;
    private User? selectedUser;
    private string backlogName = "";
    private string msg = "";
    private bool showModal;
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private IEnumerable<Claim>? userClaims;
    private Claim? UserId;

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = (ICollection<User>?)await userService.GetUsers();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        
        userClaims = user.Claims;
        UserId = user.FindFirst("UserId");
    }
    
    private async Task Create()
    {
        try
        {
            BacklogCreationDto dto = new BacklogCreationDto(Int32.Parse(UserId.Value), backlogName);
            await backlobService.CreateAsync(dto);
            showModal = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void Proceed()
    {
        showModal = false;
        navMgr.NavigateTo("/Backlog");
    }

}