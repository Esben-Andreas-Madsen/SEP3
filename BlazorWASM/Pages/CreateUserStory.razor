@page "/CreateUserStory"
@using global::Shared.DTOs
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@inject IUserStoryService userStoryService
<div class="card">
    <h3>Create User Story</h3>
    <div class="form-group field">

        <label>Title:</label>
        <input type="text" @bind="title" @bind:event="oninput"/>
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <label style="color: @color">@resultMsg</label>
        }
        <label>Description:</label>
        <input type="text" @bind="description" @bind:event="oninput"/>
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <label style="color: @color">@resultMsg</label>
        }


    </div>
    <div class="button-row">
        <button @onclick="Create" disabled="@(string.IsNullOrEmpty(title))" class="acceptbtn">Create</button>
    </div>
</div>


@code {
    private string? title = "";
    private string? description = "";


    private string resultMsg = "";
    private string color = "";
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private Claim? UserId;

    private async Task Create()
    {
        resultMsg = "";

        try
        {
            await userStoryService.Create(new UserStoryCreationDto(Int32.Parse(UserId.Value),title, description));
            title = "";
            resultMsg = "User story successfully created";
            color = "green";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }
    }
    
    protected override async Task OnInitializedAsync()
    {

        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;

        UserId = user.FindFirst("UserId");
    }


}