@page "/Backlog"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs

@inject IBackLogService backLogService
@inject NavigationManager navMgr

<h3>Backlogs</h3>

<div>
    <button @onclick="LoadBacklogs">Load backlogs</button>
</div>

@if (!backlogs.Any())
{
    <p>No Backlogs to display</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Owner</th>
            <th>Is completed</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in backlogs)
        {
            <tr>
                <td>@item.name</td>
                <td>@item.UserId?</td>
                <td>@item.IsCompleted</td>
                @* <td> *@
                @*     <FancyCheckBox IsCompleted="@item.IsCompleted" OnChange="@(new Func<object, Task>((status) => CompleteTodo(item, status)))"></FancyCheckBox> *@
                @* </td> *@
                @* <td> *@
                @*     <img src="icons/edit.gif" class="funnel" @onclick="@(() => navMgr.NavigateTo($"/EditTodo/{item.name}"))"/> *@
                @* </td> *@
                @* <td> *@
                @*     <label @onclick="@(() => RemoveTodo(item.Id))" style="cursor:pointer; color: red; font-weight: bold"> *@
                @*         &#x2717; *@
                @*     </label> *@
                @* </td> *@
            </tr>
        }
        </tbody>
    </table>
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
    private IEnumerable<Domain.Models.Backlog>? backlogs;
    private string msg = "";
    private bool doShowFilters = false;
    private string userNameFilter;
    private int? userIdFilter;
    private User? user;
    private string? completedStatusFilter;
    private string? titleContainsFilter;
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            backlogs = await backLogService.GetAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task<Task<IEnumerable<Domain.Models.Backlog>?>> LoadBacklogs()
    {

        backlogs = await backLogService.GetAsync();
        return Task.FromResult(backlogs);
    }

    private async Task CompleteTodo(Backlog item, bool status)
    {
        BacklogUpdateDto dto = new(item.user?.UserName)
        {
            IsCompleted = status
        };
        try
        {
            await backLogService.UpdateAsync(dto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    // private async Task RemoveTodo(int todoId)
    // {
    //     msg = "";
    //     try
    //     {
    //         await todoService.DeleteAsync(todoId);
    //
    //         var list = new List<Todo>(todos!);
    //         list.RemoveAll(todo => todo.Id == todoId);
    //         todos = list.AsEnumerable();
    //     }
    //     catch (Exception e)
    //     {
    //         Console.WriteLine(e);
    //         msg = e.Message;
    //     }
    // }
}