// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/ScrumService.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace LoadDatabase {
  public static partial class ScrumService
  {
    static readonly string __ServiceName = "dk.via.scrum.ScrumService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::LoadDatabase.UserRequest> __Marshaller_dk_via_scrum_UserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::LoadDatabase.UserRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::LoadDatabase.UserResponse> __Marshaller_dk_via_scrum_UserResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::LoadDatabase.UserResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::LoadDatabase.NewUserRequest> __Marshaller_dk_via_scrum_NewUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::LoadDatabase.NewUserRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::LoadDatabase.SuccessResponse> __Marshaller_dk_via_scrum_SuccessResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::LoadDatabase.SuccessResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::LoadDatabase.AllUsersRequest> __Marshaller_dk_via_scrum_AllUsersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::LoadDatabase.AllUsersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::LoadDatabase.UserStoryRequest> __Marshaller_dk_via_scrum_UserStoryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::LoadDatabase.UserStoryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::LoadDatabase.UserStoryResponse> __Marshaller_dk_via_scrum_UserStoryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::LoadDatabase.UserStoryResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::LoadDatabase.NewUserStoryRequest> __Marshaller_dk_via_scrum_NewUserStoryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::LoadDatabase.NewUserStoryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::LoadDatabase.AllUserStoriesRequest> __Marshaller_dk_via_scrum_AllUserStoriesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::LoadDatabase.AllUserStoriesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::LoadDatabase.BacklogRequest> __Marshaller_dk_via_scrum_BacklogRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::LoadDatabase.BacklogRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::LoadDatabase.BacklogResponse> __Marshaller_dk_via_scrum_BacklogResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::LoadDatabase.BacklogResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::LoadDatabase.NewBacklogRequest> __Marshaller_dk_via_scrum_NewBacklogRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::LoadDatabase.NewBacklogRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::LoadDatabase.AllBacklogsRequest> __Marshaller_dk_via_scrum_AllBacklogsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::LoadDatabase.AllBacklogsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::LoadDatabase.AssignUserStoryToBacklog> __Marshaller_dk_via_scrum_AssignUserStoryToBacklog = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::LoadDatabase.AssignUserStoryToBacklog.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::LoadDatabase.UserRequest, global::LoadDatabase.UserResponse> __Method_getUser = new grpc::Method<global::LoadDatabase.UserRequest, global::LoadDatabase.UserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getUser",
        __Marshaller_dk_via_scrum_UserRequest,
        __Marshaller_dk_via_scrum_UserResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::LoadDatabase.NewUserRequest, global::LoadDatabase.SuccessResponse> __Method_createUser = new grpc::Method<global::LoadDatabase.NewUserRequest, global::LoadDatabase.SuccessResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createUser",
        __Marshaller_dk_via_scrum_NewUserRequest,
        __Marshaller_dk_via_scrum_SuccessResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::LoadDatabase.AllUsersRequest, global::LoadDatabase.UserResponse> __Method_getAllUsers = new grpc::Method<global::LoadDatabase.AllUsersRequest, global::LoadDatabase.UserResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getAllUsers",
        __Marshaller_dk_via_scrum_AllUsersRequest,
        __Marshaller_dk_via_scrum_UserResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::LoadDatabase.UserStoryRequest, global::LoadDatabase.UserStoryResponse> __Method_getUserStoryById = new grpc::Method<global::LoadDatabase.UserStoryRequest, global::LoadDatabase.UserStoryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getUserStoryById",
        __Marshaller_dk_via_scrum_UserStoryRequest,
        __Marshaller_dk_via_scrum_UserStoryResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::LoadDatabase.NewUserStoryRequest, global::LoadDatabase.SuccessResponse> __Method_createUserStory = new grpc::Method<global::LoadDatabase.NewUserStoryRequest, global::LoadDatabase.SuccessResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createUserStory",
        __Marshaller_dk_via_scrum_NewUserStoryRequest,
        __Marshaller_dk_via_scrum_SuccessResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::LoadDatabase.AllUserStoriesRequest, global::LoadDatabase.UserStoryResponse> __Method_getAllUserStories = new grpc::Method<global::LoadDatabase.AllUserStoriesRequest, global::LoadDatabase.UserStoryResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getAllUserStories",
        __Marshaller_dk_via_scrum_AllUserStoriesRequest,
        __Marshaller_dk_via_scrum_UserStoryResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::LoadDatabase.BacklogRequest, global::LoadDatabase.BacklogResponse> __Method_getBacklog = new grpc::Method<global::LoadDatabase.BacklogRequest, global::LoadDatabase.BacklogResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getBacklog",
        __Marshaller_dk_via_scrum_BacklogRequest,
        __Marshaller_dk_via_scrum_BacklogResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::LoadDatabase.NewBacklogRequest, global::LoadDatabase.SuccessResponse> __Method_createBacklog = new grpc::Method<global::LoadDatabase.NewBacklogRequest, global::LoadDatabase.SuccessResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createBacklog",
        __Marshaller_dk_via_scrum_NewBacklogRequest,
        __Marshaller_dk_via_scrum_SuccessResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::LoadDatabase.AllBacklogsRequest, global::LoadDatabase.BacklogResponse> __Method_getAllBacklogs = new grpc::Method<global::LoadDatabase.AllBacklogsRequest, global::LoadDatabase.BacklogResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getAllBacklogs",
        __Marshaller_dk_via_scrum_AllBacklogsRequest,
        __Marshaller_dk_via_scrum_BacklogResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::LoadDatabase.AssignUserStoryToBacklog, global::LoadDatabase.SuccessResponse> __Method_assignUserStory = new grpc::Method<global::LoadDatabase.AssignUserStoryToBacklog, global::LoadDatabase.SuccessResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "assignUserStory",
        __Marshaller_dk_via_scrum_AssignUserStoryToBacklog,
        __Marshaller_dk_via_scrum_SuccessResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::LoadDatabase.ScrumServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for ScrumService</summary>
    public partial class ScrumServiceClient : grpc::ClientBase<ScrumServiceClient>
    {
      /// <summary>Creates a new client for ScrumService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ScrumServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ScrumService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ScrumServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ScrumServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ScrumServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::LoadDatabase.UserResponse getUser(global::LoadDatabase.UserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::LoadDatabase.UserResponse getUser(global::LoadDatabase.UserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getUser, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::LoadDatabase.UserResponse> getUserAsync(global::LoadDatabase.UserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::LoadDatabase.UserResponse> getUserAsync(global::LoadDatabase.UserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getUser, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::LoadDatabase.SuccessResponse createUser(global::LoadDatabase.NewUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::LoadDatabase.SuccessResponse createUser(global::LoadDatabase.NewUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createUser, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::LoadDatabase.SuccessResponse> createUserAsync(global::LoadDatabase.NewUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::LoadDatabase.SuccessResponse> createUserAsync(global::LoadDatabase.NewUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createUser, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::LoadDatabase.UserResponse> getAllUsers(global::LoadDatabase.AllUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getAllUsers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::LoadDatabase.UserResponse> getAllUsers(global::LoadDatabase.AllUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getAllUsers, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::LoadDatabase.UserStoryResponse getUserStoryById(global::LoadDatabase.UserStoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getUserStoryById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::LoadDatabase.UserStoryResponse getUserStoryById(global::LoadDatabase.UserStoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getUserStoryById, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::LoadDatabase.UserStoryResponse> getUserStoryByIdAsync(global::LoadDatabase.UserStoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getUserStoryByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::LoadDatabase.UserStoryResponse> getUserStoryByIdAsync(global::LoadDatabase.UserStoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getUserStoryById, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::LoadDatabase.SuccessResponse createUserStory(global::LoadDatabase.NewUserStoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createUserStory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::LoadDatabase.SuccessResponse createUserStory(global::LoadDatabase.NewUserStoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createUserStory, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::LoadDatabase.SuccessResponse> createUserStoryAsync(global::LoadDatabase.NewUserStoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createUserStoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::LoadDatabase.SuccessResponse> createUserStoryAsync(global::LoadDatabase.NewUserStoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createUserStory, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::LoadDatabase.UserStoryResponse> getAllUserStories(global::LoadDatabase.AllUserStoriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getAllUserStories(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::LoadDatabase.UserStoryResponse> getAllUserStories(global::LoadDatabase.AllUserStoriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getAllUserStories, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::LoadDatabase.BacklogResponse> getBacklog(global::LoadDatabase.BacklogRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getBacklog(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::LoadDatabase.BacklogResponse> getBacklog(global::LoadDatabase.BacklogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getBacklog, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::LoadDatabase.SuccessResponse createBacklog(global::LoadDatabase.NewBacklogRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createBacklog(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::LoadDatabase.SuccessResponse createBacklog(global::LoadDatabase.NewBacklogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createBacklog, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::LoadDatabase.SuccessResponse> createBacklogAsync(global::LoadDatabase.NewBacklogRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createBacklogAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::LoadDatabase.SuccessResponse> createBacklogAsync(global::LoadDatabase.NewBacklogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createBacklog, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::LoadDatabase.BacklogResponse> getAllBacklogs(global::LoadDatabase.AllBacklogsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getAllBacklogs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::LoadDatabase.BacklogResponse> getAllBacklogs(global::LoadDatabase.AllBacklogsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getAllBacklogs, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::LoadDatabase.SuccessResponse assignUserStory(global::LoadDatabase.AssignUserStoryToBacklog request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return assignUserStory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::LoadDatabase.SuccessResponse assignUserStory(global::LoadDatabase.AssignUserStoryToBacklog request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_assignUserStory, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::LoadDatabase.SuccessResponse> assignUserStoryAsync(global::LoadDatabase.AssignUserStoryToBacklog request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return assignUserStoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::LoadDatabase.SuccessResponse> assignUserStoryAsync(global::LoadDatabase.AssignUserStoryToBacklog request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_assignUserStory, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ScrumServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ScrumServiceClient(configuration);
      }
    }

  }
}
#endregion
